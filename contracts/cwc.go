// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CWCMetaData contains all meta data concerning the CWC contract.
var CWCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"CollectionMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cwd\",\"type\":\"address\"}],\"name\":\"_setCWD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoWizardsDeck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"mintCollection\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"ids\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setCollectionBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280601381526020017f43727970746f2d77697a617264732063617264000000000000000000000000008152506040518060400160405280600381526020017f435743000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b61389480620005096000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806395d89b41116100de578063c87b56dd11610097578063ea95180d11610071578063ea95180d146104b9578063edc3bc3f146104e9578063f2fde38b14610519578063fdbda0ec146105355761018e565b8063c87b56dd1461043b578063d40aa1421461046b578063e985e9c5146104895761018e565b806395d89b4114610369578063992924a614610387578063a22cb465146103b7578063a7cc0136146103d3578063b88d4fde14610403578063c23fa5611461041f5761018e565b80633c9907341161014b5780636ebcf607116101255780636ebcf607146102e157806370a0823114610311578063715018a6146103415780638da5cb5b1461034b5761018e565b80633c9907341461027957806342842e0e146102955780636352211e146102b15761018e565b806301ffc9a71461019357806306fdde03146101c3578063081812fc146101e1578063095ea7b3146102115780630bb78ec11461022d57806323b872dd1461025d575b600080fd5b6101ad60048036038101906101a891906121f8565b610566565b6040516101ba9190612240565b60405180910390f35b6101cb610648565b6040516101d891906122f4565b60405180910390f35b6101fb60048036038101906101f6919061234c565b6106da565b60405161020891906123ba565b60405180910390f35b61022b60048036038101906102269190612401565b610720565b005b6102476004803603810190610242919061234c565b610829565b60405161025491906122f4565b60405180910390f35b61027760048036038101906102729190612441565b6108c9565b005b610293600480360381019061028e91906125c9565b610922565b005b6102af60048036038101906102aa9190612441565b61099a565b005b6102cb60048036038101906102c6919061234c565b6109ba565b6040516102d891906123ba565b60405180910390f35b6102fb60048036038101906102f69190612612565b610a6b565b604051610308919061264e565b60405180910390f35b61032b60048036038101906103269190612612565b610a83565b604051610338919061264e565b60405180910390f35b610349610b3a565b005b610353610b4e565b60405161036091906123ba565b60405180910390f35b610371610b78565b60405161037e91906122f4565b60405180910390f35b6103a1600480360381019061039c919061234c565b610c0a565b6040516103ae91906123ba565b60405180910390f35b6103d160048036038101906103cc9190612695565b610c3d565b005b6103ed60048036038101906103e8919061234c565b610c53565b6040516103fa91906123ba565b60405180910390f35b61041d60048036038101906104189190612776565b610c86565b005b61043960048036038101906104349190612612565b610ce8565b005b6104556004803603810190610450919061234c565b610d34565b60405161046291906122f4565b60405180910390f35b610473610e46565b60405161048091906123ba565b60405180910390f35b6104a3600480360381019061049e91906127f9565b610e6c565b6040516104b09190612240565b60405180910390f35b6104d360048036038101906104ce9190612839565b610f00565b6040516104e09190612924565b60405180910390f35b61050360048036038101906104fe91906127f9565b611110565b6040516105109190612240565b60405180910390f35b610533600480360381019061052e9190612612565b61113f565b005b61054f600480360381019061054a919061234c565b6111c2565b60405161055d92919061293f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061063157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061064157506106408261126e565b5b9050919050565b6060600080546106579061299e565b80601f01602080910402602001604051908101604052809291908181526020018280546106839061299e565b80156106d05780601f106106a5576101008083540402835291602001916106d0565b820191906000526020600020905b8154815290600101906020018083116106b357829003601f168201915b5050505050905090565b60006106e5826112d8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061072b826109ba565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361079b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079290612a41565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107db57506107da8133610e6c565b5b61081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190612ad3565b60405180910390fd5b6108248383611323565b505050565b600e60205280600052604060002060009150905080546108489061299e565b80601f01602080910402602001604051908101604052809291908181526020018280546108749061299e565b80156108c15780601f10610896576101008083540402835291602001916108c1565b820191906000526020600020905b8154815290600101906020018083116108a457829003601f168201915b505050505081565b6108d333826113dc565b610912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090990612b65565b60405180910390fd5b61091d83838361148b565b505050565b61092a6117ff565b6008600081548092919061093d90612bb4565b919050555060006040518060400160405280600854815260200183815250905080600b600060085481526020019081526020016000206000820151816000015560208201518160010190816109929190612da8565b509050505050565b6109b583838360405180602001604052806000815250610c86565b505050565b600080600d600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5990612ec6565b60405180910390fd5b80915050919050565b600c6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90612f58565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b426117ff565b610b4c600061187d565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610b879061299e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb39061299e565b8015610c005780601f10610bd557610100808354040283529160200191610c00565b820191906000526020600020905b815481529060010190602001808311610be357829003601f168201915b5050505050905090565b600d6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c4f610c48611943565b838361194b565b5050565b600f6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c97610c91611943565b836113dc565b610cd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccd90612b65565b60405180910390fd5b610ce284848484611ab7565b50505050565b610cf06117ff565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060610d3f826112d8565b6000600660008481526020019081526020016000208054610d5f9061299e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8b9061299e565b8015610dd85780601f10610dad57610100808354040283529160200191610dd8565b820191906000526020600020905b815481529060010190602001808311610dbb57829003601f168201915b505050505090506000610de9611b13565b90506000815103610dfe578192505050610e41565b600082511115610e33578082604051602001610e1b929190612fb4565b60405160208183030381529060405292505050610e41565b610e3c84611b2a565b925050505b919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610f0861216a565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8f9061304a565b60405180910390fd5b60005b60048110156110b95760096000815480929190610fb790612bb4565b9190505550610fc883600954611b92565b611087600954611082600b60008881526020019081526020016000206001018054610ff29061299e565b80601f016020809104026020016040519081016040528092919081815260200182805461101e9061299e565b801561106b5780601f106110405761010080835404028352916020019161106b565b820191906000526020600020905b81548152906001019060200180831161104e57829003601f168201915b505050505060018561107d919061306a565b611d53565b611d87565b60095482826004811061109d5761109c6130c0565b5b60200201818152505080806110b190612bb4565b915050610f9b565b508173ffffffffffffffffffffffffffffffffffffffff167f03650dec68d808fe68d5dec24af404f96037fa840e955336aa6228936c39483f600854604051611102919061264e565b60405180910390a292915050565b60106020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6111476117ff565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ad90613161565b60405180910390fd5b6111bf8161187d565b50565b600b6020528060005260406000206000915090508060000154908060010180546111eb9061299e565b80601f01602080910402602001604051908101604052809291908181526020018280546112179061299e565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b5050505050905082565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6112e181611df4565b611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790612ec6565b60405180910390fd5b50565b81600f600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611396836109ba565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113e8836109ba565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061148257508373ffffffffffffffffffffffffffffffffffffffff16600f600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166114ab826109ba565b73ffffffffffffffffffffffffffffffffffffffff1614611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f8906131f3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156790613285565b60405180910390fd5b61157b600082611323565b6001600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115cb91906132a5565b925050819055506001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611622919061306a565b9250508190555081600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c86871d846001846040518463ffffffff1660e01b81526004016116db93929190613314565b600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b50505050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c86871d836000846040518463ffffffff1660e01b815260040161176d93929190613386565b600060405180830381600087803b15801561178757600080fd5b505af115801561179b573d6000803e3d6000fd5b50505050808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611807611943565b73ffffffffffffffffffffffffffffffffffffffff16611825610b4e565b73ffffffffffffffffffffffffffffffffffffffff161461187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290613409565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b090613475565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611aaa9190612240565b60405180910390a3505050565b611ac284848461148b565b611ace84848484611e60565b611b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0490613507565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611b35826112d8565b6000611b3f611b13565b90506000815111611b5f5760405180602001604052806000815250611b8a565b80611b6984611fe7565b604051602001611b7a929190612fb4565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf890613573565b60405180910390fd5b611c0a81611df4565b15611c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c41906135df565b60405180910390fd5b6001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c9a919061306a565b9250508190555081600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b606082611d5f83611fe7565b604051602001611d70929190613625565b604051602081830303815290604052905092915050565b611d9082611df4565b611dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc6906136ca565b60405180910390fd5b80600e60008481526020019081526020016000209081611def9190612da8565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600d600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000611e818473ffffffffffffffffffffffffffffffffffffffff16612147565b15611fda578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611eaa611943565b8786866040518563ffffffff1660e01b8152600401611ecc949392919061373f565b6020604051808303816000875af1925050508015611f0857506040513d601f19601f82011682018060405250810190611f0591906137a0565b60015b611f8a573d8060008114611f38576040519150601f19603f3d011682016040523d82523d6000602084013e611f3d565b606091505b506000815103611f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7990613507565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611fdf565b600190505b949350505050565b60606000820361202e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612142565b600082905060005b6000821461206057808061204990612bb4565b915050600a8261205991906137fc565b9150612036565b60008167ffffffffffffffff81111561207c5761207b61249e565b5b6040519080825280601f01601f1916602001820160405280156120ae5781602001600182028036833780820191505090505b5090505b6000851461213b576001826120c791906132a5565b9150600a856120d6919061382d565b60306120e2919061306a565b60f81b8183815181106120f8576120f76130c0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561213491906137fc565b94506120b2565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060800160405280600490602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6121d5816121a0565b81146121e057600080fd5b50565b6000813590506121f2816121cc565b92915050565b60006020828403121561220e5761220d612196565b5b600061221c848285016121e3565b91505092915050565b60008115159050919050565b61223a81612225565b82525050565b60006020820190506122556000830184612231565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561229557808201518184015260208101905061227a565b838111156122a4576000848401525b50505050565b6000601f19601f8301169050919050565b60006122c68261225b565b6122d08185612266565b93506122e0818560208601612277565b6122e9816122aa565b840191505092915050565b6000602082019050818103600083015261230e81846122bb565b905092915050565b6000819050919050565b61232981612316565b811461233457600080fd5b50565b60008135905061234681612320565b92915050565b60006020828403121561236257612361612196565b5b600061237084828501612337565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123a482612379565b9050919050565b6123b481612399565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b6123de81612399565b81146123e957600080fd5b50565b6000813590506123fb816123d5565b92915050565b6000806040838503121561241857612417612196565b5b6000612426858286016123ec565b925050602061243785828601612337565b9150509250929050565b60008060006060848603121561245a57612459612196565b5b6000612468868287016123ec565b9350506020612479868287016123ec565b925050604061248a86828701612337565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124d6826122aa565b810181811067ffffffffffffffff821117156124f5576124f461249e565b5b80604052505050565b600061250861218c565b905061251482826124cd565b919050565b600067ffffffffffffffff8211156125345761253361249e565b5b61253d826122aa565b9050602081019050919050565b82818337600083830152505050565b600061256c61256784612519565b6124fe565b90508281526020810184848401111561258857612587612499565b5b61259384828561254a565b509392505050565b600082601f8301126125b0576125af612494565b5b81356125c0848260208601612559565b91505092915050565b6000602082840312156125df576125de612196565b5b600082013567ffffffffffffffff8111156125fd576125fc61219b565b5b6126098482850161259b565b91505092915050565b60006020828403121561262857612627612196565b5b6000612636848285016123ec565b91505092915050565b61264881612316565b82525050565b6000602082019050612663600083018461263f565b92915050565b61267281612225565b811461267d57600080fd5b50565b60008135905061268f81612669565b92915050565b600080604083850312156126ac576126ab612196565b5b60006126ba858286016123ec565b92505060206126cb85828601612680565b9150509250929050565b600067ffffffffffffffff8211156126f0576126ef61249e565b5b6126f9826122aa565b9050602081019050919050565b6000612719612714846126d5565b6124fe565b90508281526020810184848401111561273557612734612499565b5b61274084828561254a565b509392505050565b600082601f83011261275d5761275c612494565b5b813561276d848260208601612706565b91505092915050565b600080600080608085870312156127905761278f612196565b5b600061279e878288016123ec565b94505060206127af878288016123ec565b93505060406127c087828801612337565b925050606085013567ffffffffffffffff8111156127e1576127e061219b565b5b6127ed87828801612748565b91505092959194509250565b600080604083850312156128105761280f612196565b5b600061281e858286016123ec565b925050602061282f858286016123ec565b9150509250929050565b600080604083850312156128505761284f612196565b5b600061285e85828601612337565b925050602061286f858286016123ec565b9150509250929050565b600060049050919050565b600081905092915050565b6000819050919050565b6128a281612316565b82525050565b60006128b48383612899565b60208301905092915050565b6000602082019050919050565b6128d681612879565b6128e08184612884565b92506128eb8261288f565b8060005b8381101561291c57815161290387826128a8565b965061290e836128c0565b9250506001810190506128ef565b505050505050565b600060808201905061293960008301846128cd565b92915050565b6000604082019050612954600083018561263f565b818103602083015261296681846122bb565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129b657607f821691505b6020821081036129c9576129c861296f565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a2b602183612266565b9150612a36826129cf565b604082019050919050565b60006020820190508181036000830152612a5a81612a1e565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612abd603e83612266565b9150612ac882612a61565b604082019050919050565b60006020820190508181036000830152612aec81612ab0565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612b4f602e83612266565b9150612b5a82612af3565b604082019050919050565b60006020820190508181036000830152612b7e81612b42565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bbf82612316565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bf157612bf0612b85565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c21565b612c688683612c21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ca5612ca0612c9b84612316565b612c80565b612316565b9050919050565b6000819050919050565b612cbf83612c8a565b612cd3612ccb82612cac565b848454612c2e565b825550505050565b600090565b612ce8612cdb565b612cf3818484612cb6565b505050565b5b81811015612d1757612d0c600082612ce0565b600181019050612cf9565b5050565b601f821115612d5c57612d2d81612bfc565b612d3684612c11565b81016020851015612d45578190505b612d59612d5185612c11565b830182612cf8565b50505b505050565b600082821c905092915050565b6000612d7f60001984600802612d61565b1980831691505092915050565b6000612d988383612d6e565b9150826002028217905092915050565b612db18261225b565b67ffffffffffffffff811115612dca57612dc961249e565b5b612dd4825461299e565b612ddf828285612d1b565b600060209050601f831160018114612e125760008415612e00578287015190505b612e0a8582612d8c565b865550612e72565b601f198416612e2086612bfc565b60005b82811015612e4857848901518255600182019150602085019450602081019050612e23565b86831015612e655784890151612e61601f891682612d6e565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612eb0601883612266565b9150612ebb82612e7a565b602082019050919050565b60006020820190508181036000830152612edf81612ea3565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612f42602983612266565b9150612f4d82612ee6565b604082019050919050565b60006020820190508181036000830152612f7181612f35565b9050919050565b600081905092915050565b6000612f8e8261225b565b612f988185612f78565b9350612fa8818560208601612277565b80840191505092915050565b6000612fc08285612f83565b9150612fcc8284612f83565b91508190509392505050565b7f43727970746f57697a61726473436172647b6f6e6c794357447d3a206163636560008201527f73732064656e6965640000000000000000000000000000000000000000000000602082015250565b6000613034602983612266565b915061303f82612fd8565b604082019050919050565b6000602082019050818103600083015261306381613027565b9050919050565b600061307582612316565b915061308083612316565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130b5576130b4612b85565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061314b602683612266565b9150613156826130ef565b604082019050919050565b6000602082019050818103600083015261317a8161313e565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131dd602583612266565b91506131e882613181565b604082019050919050565b6000602082019050818103600083015261320c816131d0565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061326f602483612266565b915061327a82613213565b604082019050919050565b6000602082019050818103600083015261329e81613262565b9050919050565b60006132b082612316565b91506132bb83612316565b9250828210156132ce576132cd612b85565b5b828203905092915050565b6000819050919050565b60006132fe6132f96132f4846132d9565b612c80565b612316565b9050919050565b61330e816132e3565b82525050565b600060608201905061332960008301866123ab565b6133366020830185613305565b613343604083018461263f565b949350505050565b6000819050919050565b600061337061336b6133668461334b565b612c80565b612316565b9050919050565b61338081613355565b82525050565b600060608201905061339b60008301866123ab565b6133a86020830185613377565b6133b5604083018461263f565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006133f3602083612266565b91506133fe826133bd565b602082019050919050565b60006020820190508181036000830152613422816133e6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061345f601983612266565b915061346a82613429565b602082019050919050565b6000602082019050818103600083015261348e81613452565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134f1603283612266565b91506134fc82613495565b604082019050919050565b60006020820190508181036000830152613520816134e4565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061355d602083612266565b915061356882613527565b602082019050919050565b6000602082019050818103600083015261358c81613550565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006135c9601c83612266565b91506135d482613593565b602082019050919050565b600060208201905081810360008301526135f8816135bc565b9050919050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000815250565b60006136318285612f83565b915061363d8284612f83565b9150613648826135ff565b6005820191508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006136b4602e83612266565b91506136bf82613658565b604082019050919050565b600060208201905081810360008301526136e3816136a7565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613711826136ea565b61371b81856136f5565b935061372b818560208601612277565b613734816122aa565b840191505092915050565b600060808201905061375460008301876123ab565b61376160208301866123ab565b61376e604083018561263f565b81810360608301526137808184613706565b905095945050505050565b60008151905061379a816121cc565b92915050565b6000602082840312156137b6576137b5612196565b5b60006137c48482850161378b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061380782612316565b915061381283612316565b925082613822576138216137cd565b5b828204905092915050565b600061383882612316565b915061384383612316565b925082613853576138526137cd565b5b82820690509291505056fea2646970667358221220ab188020cba988cbd92fe28f2d1110609dc9889e1a0c2097a7b32afe38cfcb0a64736f6c634300080f0033",
}

// CWCABI is the input ABI used to generate the binding from.
// Deprecated: Use CWCMetaData.ABI instead.
var CWCABI = CWCMetaData.ABI

// CWCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CWCMetaData.Bin instead.
var CWCBin = CWCMetaData.Bin

// DeployCWC deploys a new Ethereum contract, binding an instance of CWC to it.
func DeployCWC(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CWC, error) {
	parsed, err := CWCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CWCBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CWC{CWCCaller: CWCCaller{contract: contract}, CWCTransactor: CWCTransactor{contract: contract}, CWCFilterer: CWCFilterer{contract: contract}}, nil
}

// CWC is an auto generated Go binding around an Ethereum contract.
type CWC struct {
	CWCCaller     // Read-only binding to the contract
	CWCTransactor // Write-only binding to the contract
	CWCFilterer   // Log filterer for contract events
}

// CWCCaller is an auto generated read-only Go binding around an Ethereum contract.
type CWCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CWCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CWCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CWCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CWCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CWCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CWCSession struct {
	Contract     *CWC              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CWCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CWCCallerSession struct {
	Contract *CWCCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CWCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CWCTransactorSession struct {
	Contract     *CWCTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CWCRaw is an auto generated low-level Go binding around an Ethereum contract.
type CWCRaw struct {
	Contract *CWC // Generic contract binding to access the raw methods on
}

// CWCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CWCCallerRaw struct {
	Contract *CWCCaller // Generic read-only contract binding to access the raw methods on
}

// CWCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CWCTransactorRaw struct {
	Contract *CWCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCWC creates a new instance of CWC, bound to a specific deployed contract.
func NewCWC(address common.Address, backend bind.ContractBackend) (*CWC, error) {
	contract, err := bindCWC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CWC{CWCCaller: CWCCaller{contract: contract}, CWCTransactor: CWCTransactor{contract: contract}, CWCFilterer: CWCFilterer{contract: contract}}, nil
}

// NewCWCCaller creates a new read-only instance of CWC, bound to a specific deployed contract.
func NewCWCCaller(address common.Address, caller bind.ContractCaller) (*CWCCaller, error) {
	contract, err := bindCWC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CWCCaller{contract: contract}, nil
}

// NewCWCTransactor creates a new write-only instance of CWC, bound to a specific deployed contract.
func NewCWCTransactor(address common.Address, transactor bind.ContractTransactor) (*CWCTransactor, error) {
	contract, err := bindCWC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CWCTransactor{contract: contract}, nil
}

// NewCWCFilterer creates a new log filterer instance of CWC, bound to a specific deployed contract.
func NewCWCFilterer(address common.Address, filterer bind.ContractFilterer) (*CWCFilterer, error) {
	contract, err := bindCWC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CWCFilterer{contract: contract}, nil
}

// bindCWC binds a generic wrapper to an already deployed contract.
func bindCWC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CWCABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CWC *CWCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CWC.Contract.CWCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CWC *CWCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CWC.Contract.CWCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CWC *CWCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CWC.Contract.CWCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CWC *CWCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CWC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CWC *CWCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CWC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CWC *CWCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CWC.Contract.contract.Transact(opts, method, params...)
}

// Balances is a free data retrieval call binding the contract method 0x6ebcf607.
//
// Solidity: function _balances(address ) view returns(uint256)
func (_CWC *CWCCaller) Balances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "_balances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balances is a free data retrieval call binding the contract method 0x6ebcf607.
//
// Solidity: function _balances(address ) view returns(uint256)
func (_CWC *CWCSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _CWC.Contract.Balances(&_CWC.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0x6ebcf607.
//
// Solidity: function _balances(address ) view returns(uint256)
func (_CWC *CWCCallerSession) Balances(arg0 common.Address) (*big.Int, error) {
	return _CWC.Contract.Balances(&_CWC.CallOpts, arg0)
}

// OperatorApprovals is a free data retrieval call binding the contract method 0xedc3bc3f.
//
// Solidity: function _operatorApprovals(address , address ) view returns(bool)
func (_CWC *CWCCaller) OperatorApprovals(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "_operatorApprovals", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OperatorApprovals is a free data retrieval call binding the contract method 0xedc3bc3f.
//
// Solidity: function _operatorApprovals(address , address ) view returns(bool)
func (_CWC *CWCSession) OperatorApprovals(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _CWC.Contract.OperatorApprovals(&_CWC.CallOpts, arg0, arg1)
}

// OperatorApprovals is a free data retrieval call binding the contract method 0xedc3bc3f.
//
// Solidity: function _operatorApprovals(address , address ) view returns(bool)
func (_CWC *CWCCallerSession) OperatorApprovals(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _CWC.Contract.OperatorApprovals(&_CWC.CallOpts, arg0, arg1)
}

// Owners is a free data retrieval call binding the contract method 0x992924a6.
//
// Solidity: function _owners(uint256 ) view returns(address)
func (_CWC *CWCCaller) Owners(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "_owners", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owners is a free data retrieval call binding the contract method 0x992924a6.
//
// Solidity: function _owners(uint256 ) view returns(address)
func (_CWC *CWCSession) Owners(arg0 *big.Int) (common.Address, error) {
	return _CWC.Contract.Owners(&_CWC.CallOpts, arg0)
}

// Owners is a free data retrieval call binding the contract method 0x992924a6.
//
// Solidity: function _owners(uint256 ) view returns(address)
func (_CWC *CWCCallerSession) Owners(arg0 *big.Int) (common.Address, error) {
	return _CWC.Contract.Owners(&_CWC.CallOpts, arg0)
}

// TokenApprovals is a free data retrieval call binding the contract method 0xa7cc0136.
//
// Solidity: function _tokenApprovals(uint256 ) view returns(address)
func (_CWC *CWCCaller) TokenApprovals(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "_tokenApprovals", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenApprovals is a free data retrieval call binding the contract method 0xa7cc0136.
//
// Solidity: function _tokenApprovals(uint256 ) view returns(address)
func (_CWC *CWCSession) TokenApprovals(arg0 *big.Int) (common.Address, error) {
	return _CWC.Contract.TokenApprovals(&_CWC.CallOpts, arg0)
}

// TokenApprovals is a free data retrieval call binding the contract method 0xa7cc0136.
//
// Solidity: function _tokenApprovals(uint256 ) view returns(address)
func (_CWC *CWCCallerSession) TokenApprovals(arg0 *big.Int) (common.Address, error) {
	return _CWC.Contract.TokenApprovals(&_CWC.CallOpts, arg0)
}

// TokenURIs is a free data retrieval call binding the contract method 0x0bb78ec1.
//
// Solidity: function _tokenURIs(uint256 ) view returns(string)
func (_CWC *CWCCaller) TokenURIs(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "_tokenURIs", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURIs is a free data retrieval call binding the contract method 0x0bb78ec1.
//
// Solidity: function _tokenURIs(uint256 ) view returns(string)
func (_CWC *CWCSession) TokenURIs(arg0 *big.Int) (string, error) {
	return _CWC.Contract.TokenURIs(&_CWC.CallOpts, arg0)
}

// TokenURIs is a free data retrieval call binding the contract method 0x0bb78ec1.
//
// Solidity: function _tokenURIs(uint256 ) view returns(string)
func (_CWC *CWCCallerSession) TokenURIs(arg0 *big.Int) (string, error) {
	return _CWC.Contract.TokenURIs(&_CWC.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CWC *CWCCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CWC *CWCSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CWC.Contract.BalanceOf(&_CWC.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CWC *CWCCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CWC.Contract.BalanceOf(&_CWC.CallOpts, owner)
}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(uint256 collectionId, string baseURI)
func (_CWC *CWCCaller) Collections(opts *bind.CallOpts, arg0 *big.Int) (struct {
	CollectionId *big.Int
	BaseURI      string
}, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "collections", arg0)

	outstruct := new(struct {
		CollectionId *big.Int
		BaseURI      string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CollectionId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BaseURI = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(uint256 collectionId, string baseURI)
func (_CWC *CWCSession) Collections(arg0 *big.Int) (struct {
	CollectionId *big.Int
	BaseURI      string
}, error) {
	return _CWC.Contract.Collections(&_CWC.CallOpts, arg0)
}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(uint256 collectionId, string baseURI)
func (_CWC *CWCCallerSession) Collections(arg0 *big.Int) (struct {
	CollectionId *big.Int
	BaseURI      string
}, error) {
	return _CWC.Contract.Collections(&_CWC.CallOpts, arg0)
}

// CryptoWizardsDeck is a free data retrieval call binding the contract method 0xd40aa142.
//
// Solidity: function cryptoWizardsDeck() view returns(address)
func (_CWC *CWCCaller) CryptoWizardsDeck(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "cryptoWizardsDeck")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CryptoWizardsDeck is a free data retrieval call binding the contract method 0xd40aa142.
//
// Solidity: function cryptoWizardsDeck() view returns(address)
func (_CWC *CWCSession) CryptoWizardsDeck() (common.Address, error) {
	return _CWC.Contract.CryptoWizardsDeck(&_CWC.CallOpts)
}

// CryptoWizardsDeck is a free data retrieval call binding the contract method 0xd40aa142.
//
// Solidity: function cryptoWizardsDeck() view returns(address)
func (_CWC *CWCCallerSession) CryptoWizardsDeck() (common.Address, error) {
	return _CWC.Contract.CryptoWizardsDeck(&_CWC.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CWC *CWCCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CWC *CWCSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CWC.Contract.GetApproved(&_CWC.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CWC *CWCCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CWC.Contract.GetApproved(&_CWC.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CWC *CWCCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CWC *CWCSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CWC.Contract.IsApprovedForAll(&_CWC.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CWC *CWCCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CWC.Contract.IsApprovedForAll(&_CWC.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CWC *CWCCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CWC *CWCSession) Name() (string, error) {
	return _CWC.Contract.Name(&_CWC.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CWC *CWCCallerSession) Name() (string, error) {
	return _CWC.Contract.Name(&_CWC.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CWC *CWCCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CWC *CWCSession) Owner() (common.Address, error) {
	return _CWC.Contract.Owner(&_CWC.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CWC *CWCCallerSession) Owner() (common.Address, error) {
	return _CWC.Contract.Owner(&_CWC.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_CWC *CWCCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "ownerOf", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_CWC *CWCSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _CWC.Contract.OwnerOf(&_CWC.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_CWC *CWCCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _CWC.Contract.OwnerOf(&_CWC.CallOpts, _tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CWC *CWCCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CWC *CWCSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CWC.Contract.SupportsInterface(&_CWC.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CWC *CWCCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CWC.Contract.SupportsInterface(&_CWC.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CWC *CWCCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CWC *CWCSession) Symbol() (string, error) {
	return _CWC.Contract.Symbol(&_CWC.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CWC *CWCCallerSession) Symbol() (string, error) {
	return _CWC.Contract.Symbol(&_CWC.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CWC *CWCCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CWC.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CWC *CWCSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CWC.Contract.TokenURI(&_CWC.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CWC *CWCCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CWC.Contract.TokenURI(&_CWC.CallOpts, tokenId)
}

// SetCWD is a paid mutator transaction binding the contract method 0xc23fa561.
//
// Solidity: function _setCWD(address _cwd) returns()
func (_CWC *CWCTransactor) SetCWD(opts *bind.TransactOpts, _cwd common.Address) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "_setCWD", _cwd)
}

// SetCWD is a paid mutator transaction binding the contract method 0xc23fa561.
//
// Solidity: function _setCWD(address _cwd) returns()
func (_CWC *CWCSession) SetCWD(_cwd common.Address) (*types.Transaction, error) {
	return _CWC.Contract.SetCWD(&_CWC.TransactOpts, _cwd)
}

// SetCWD is a paid mutator transaction binding the contract method 0xc23fa561.
//
// Solidity: function _setCWD(address _cwd) returns()
func (_CWC *CWCTransactorSession) SetCWD(_cwd common.Address) (*types.Transaction, error) {
	return _CWC.Contract.SetCWD(&_CWC.TransactOpts, _cwd)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _to, uint256 _tokenId) returns()
func (_CWC *CWCTransactor) Approve(opts *bind.TransactOpts, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "approve", _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _to, uint256 _tokenId) returns()
func (_CWC *CWCSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.Contract.Approve(&_CWC.TransactOpts, _to, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _to, uint256 _tokenId) returns()
func (_CWC *CWCTransactorSession) Approve(_to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.Contract.Approve(&_CWC.TransactOpts, _to, _tokenId)
}

// MintCollection is a paid mutator transaction binding the contract method 0xea95180d.
//
// Solidity: function mintCollection(uint256 _collectionId, address _origin) returns(uint256[4] ids)
func (_CWC *CWCTransactor) MintCollection(opts *bind.TransactOpts, _collectionId *big.Int, _origin common.Address) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "mintCollection", _collectionId, _origin)
}

// MintCollection is a paid mutator transaction binding the contract method 0xea95180d.
//
// Solidity: function mintCollection(uint256 _collectionId, address _origin) returns(uint256[4] ids)
func (_CWC *CWCSession) MintCollection(_collectionId *big.Int, _origin common.Address) (*types.Transaction, error) {
	return _CWC.Contract.MintCollection(&_CWC.TransactOpts, _collectionId, _origin)
}

// MintCollection is a paid mutator transaction binding the contract method 0xea95180d.
//
// Solidity: function mintCollection(uint256 _collectionId, address _origin) returns(uint256[4] ids)
func (_CWC *CWCTransactorSession) MintCollection(_collectionId *big.Int, _origin common.Address) (*types.Transaction, error) {
	return _CWC.Contract.MintCollection(&_CWC.TransactOpts, _collectionId, _origin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CWC *CWCTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CWC *CWCSession) RenounceOwnership() (*types.Transaction, error) {
	return _CWC.Contract.RenounceOwnership(&_CWC.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CWC *CWCTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CWC.Contract.RenounceOwnership(&_CWC.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CWC *CWCTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CWC *CWCSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.Contract.SafeTransferFrom(&_CWC.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CWC *CWCTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.Contract.SafeTransferFrom(&_CWC.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_CWC *CWCTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_CWC *CWCSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _CWC.Contract.SafeTransferFrom0(&_CWC.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_CWC *CWCTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _CWC.Contract.SafeTransferFrom0(&_CWC.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CWC *CWCTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CWC *CWCSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CWC.Contract.SetApprovalForAll(&_CWC.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CWC *CWCTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CWC.Contract.SetApprovalForAll(&_CWC.TransactOpts, operator, approved)
}

// SetCollectionBaseURI is a paid mutator transaction binding the contract method 0x3c990734.
//
// Solidity: function setCollectionBaseURI(string _baseURI) returns()
func (_CWC *CWCTransactor) SetCollectionBaseURI(opts *bind.TransactOpts, _baseURI string) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "setCollectionBaseURI", _baseURI)
}

// SetCollectionBaseURI is a paid mutator transaction binding the contract method 0x3c990734.
//
// Solidity: function setCollectionBaseURI(string _baseURI) returns()
func (_CWC *CWCSession) SetCollectionBaseURI(_baseURI string) (*types.Transaction, error) {
	return _CWC.Contract.SetCollectionBaseURI(&_CWC.TransactOpts, _baseURI)
}

// SetCollectionBaseURI is a paid mutator transaction binding the contract method 0x3c990734.
//
// Solidity: function setCollectionBaseURI(string _baseURI) returns()
func (_CWC *CWCTransactorSession) SetCollectionBaseURI(_baseURI string) (*types.Transaction, error) {
	return _CWC.Contract.SetCollectionBaseURI(&_CWC.TransactOpts, _baseURI)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) returns()
func (_CWC *CWCTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) returns()
func (_CWC *CWCSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.Contract.TransferFrom(&_CWC.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) returns()
func (_CWC *CWCTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _CWC.Contract.TransferFrom(&_CWC.TransactOpts, _from, _to, _tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CWC *CWCTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CWC.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CWC *CWCSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CWC.Contract.TransferOwnership(&_CWC.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CWC *CWCTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CWC.Contract.TransferOwnership(&_CWC.TransactOpts, newOwner)
}

// CWCApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CWC contract.
type CWCApprovalIterator struct {
	Event *CWCApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CWCApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CWCApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CWCApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CWCApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CWCApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CWCApproval represents a Approval event raised by the CWC contract.
type CWCApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CWC *CWCFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CWCApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CWC.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CWCApprovalIterator{contract: _CWC.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CWC *CWCFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CWCApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CWC.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CWCApproval)
				if err := _CWC.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CWC *CWCFilterer) ParseApproval(log types.Log) (*CWCApproval, error) {
	event := new(CWCApproval)
	if err := _CWC.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CWCApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CWC contract.
type CWCApprovalForAllIterator struct {
	Event *CWCApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CWCApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CWCApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CWCApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CWCApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CWCApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CWCApprovalForAll represents a ApprovalForAll event raised by the CWC contract.
type CWCApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CWC *CWCFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CWCApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CWC.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CWCApprovalForAllIterator{contract: _CWC.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CWC *CWCFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CWCApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CWC.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CWCApprovalForAll)
				if err := _CWC.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CWC *CWCFilterer) ParseApprovalForAll(log types.Log) (*CWCApprovalForAll, error) {
	event := new(CWCApprovalForAll)
	if err := _CWC.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CWCCollectionMintedIterator is returned from FilterCollectionMinted and is used to iterate over the raw logs and unpacked data for CollectionMinted events raised by the CWC contract.
type CWCCollectionMintedIterator struct {
	Event *CWCCollectionMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CWCCollectionMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CWCCollectionMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CWCCollectionMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CWCCollectionMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CWCCollectionMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CWCCollectionMinted represents a CollectionMinted event raised by the CWC contract.
type CWCCollectionMinted struct {
	Owner        common.Address
	CollectionId *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCollectionMinted is a free log retrieval operation binding the contract event 0x03650dec68d808fe68d5dec24af404f96037fa840e955336aa6228936c39483f.
//
// Solidity: event CollectionMinted(address indexed owner, uint256 collectionId)
func (_CWC *CWCFilterer) FilterCollectionMinted(opts *bind.FilterOpts, owner []common.Address) (*CWCCollectionMintedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _CWC.contract.FilterLogs(opts, "CollectionMinted", ownerRule)
	if err != nil {
		return nil, err
	}
	return &CWCCollectionMintedIterator{contract: _CWC.contract, event: "CollectionMinted", logs: logs, sub: sub}, nil
}

// WatchCollectionMinted is a free log subscription operation binding the contract event 0x03650dec68d808fe68d5dec24af404f96037fa840e955336aa6228936c39483f.
//
// Solidity: event CollectionMinted(address indexed owner, uint256 collectionId)
func (_CWC *CWCFilterer) WatchCollectionMinted(opts *bind.WatchOpts, sink chan<- *CWCCollectionMinted, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _CWC.contract.WatchLogs(opts, "CollectionMinted", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CWCCollectionMinted)
				if err := _CWC.contract.UnpackLog(event, "CollectionMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollectionMinted is a log parse operation binding the contract event 0x03650dec68d808fe68d5dec24af404f96037fa840e955336aa6228936c39483f.
//
// Solidity: event CollectionMinted(address indexed owner, uint256 collectionId)
func (_CWC *CWCFilterer) ParseCollectionMinted(log types.Log) (*CWCCollectionMinted, error) {
	event := new(CWCCollectionMinted)
	if err := _CWC.contract.UnpackLog(event, "CollectionMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CWCOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CWC contract.
type CWCOwnershipTransferredIterator struct {
	Event *CWCOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CWCOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CWCOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CWCOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CWCOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CWCOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CWCOwnershipTransferred represents a OwnershipTransferred event raised by the CWC contract.
type CWCOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CWC *CWCFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CWCOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CWC.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CWCOwnershipTransferredIterator{contract: _CWC.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CWC *CWCFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CWCOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CWC.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CWCOwnershipTransferred)
				if err := _CWC.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CWC *CWCFilterer) ParseOwnershipTransferred(log types.Log) (*CWCOwnershipTransferred, error) {
	event := new(CWCOwnershipTransferred)
	if err := _CWC.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CWCTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CWC contract.
type CWCTransferIterator struct {
	Event *CWCTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CWCTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CWCTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CWCTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CWCTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CWCTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CWCTransfer represents a Transfer event raised by the CWC contract.
type CWCTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CWC *CWCFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CWCTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CWC.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CWCTransferIterator{contract: _CWC.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CWC *CWCFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CWCTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CWC.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CWCTransfer)
				if err := _CWC.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CWC *CWCFilterer) ParseTransfer(log types.Log) (*CWCTransfer, error) {
	event := new(CWCTransfer)
	if err := _CWC.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
